if (verbose) message("filtering and normalizing")
# common genes
common.genes <- intersect(row.names(train), row.names(test))
# merge test and training sets and normalize together
combined <- cbind(train[common.genes,], test[common.genes,])
normalized <- voom(as.matrix(combined), normalize.method = "none")$E
# filter for most variable genes
norm.filtered <- t(normalized[rownames(normalized) %in% genes,])
# split back up into train and test sets
train.i <- 1:ncol(train) # indices for train samples
test.i <- (1 + ncol(train)) : (ncol(train) + ncol(test)) # indices for test samples
norm.train <- norm.filtered[train.i,]
norm.test <- norm.filtered[test.i,]
# duplicate samples
norm.train.copy <- norm.train
train.tissues.copy <- train.tissues
while (any(table(train.tissues) < 3)) {
if (verbose) message("Not enough observations per tissue, duplicating data")
norm.train <- rbind(data.frame(norm.train),
data.frame(norm.train.copy))
train.tissues <- c(train.tissues, train.tissues.copy)
}
# get fold ids
if (verbose) message("Determining folds")
fold.id <- sample(rep(1:10, length(train.tissues)), length(train.tissues))
while (any(sapply(1:10,
function(i, f, m) {
any(table(m[f != i]) < 2)
},
fold.id, train.tissues))) {
if (verbose) message("retrying")
fold.id <- sample(rep(1:10, length(train.tissues)),
length(train.tissues))
}
# create the model
if (verbose) message("fitting model")
cvfit <- cv.glmnet(as.matrix(norm.train), train.tissues,
family="multinomial", foldid = fold.id)
# determine keyGenes(tm) for each tissue
if (verbose) message("Retrieving key genes")
coef <- coef(cvfit,  s=cvfit$lambda.min)
tissue.genes <- lapply(coef, function(x){
ind <- x@i[-1]+1
x@Dimnames[[1]][ind]
})
# make prediction for the test set
if (verbose) message("Making predicions")
pred <- drop(predict(cvfit, newx=norm.test, type="response",
s=cvfit$lambda.min))
prediction.matrix <- t(pred)
result <- data.frame(row.names=rownames(pred),
truth=test.tissues,
predicted=colnames(pred)[apply(pred,1,which.max)])
# Determine accuracy
if (verbose) message("calculating accuracy")
correct <- as.character(result$truth) == as.character(result$predicted)
nCorrect <- sum(correct, na.rm = T)
nTotal <- sum(!is.na(correct))
accuracy <- nCorrect / nTotal
# construct output
if (verbose) message("preparing output")
out <- new("KeyGenesResults",
result=result,
accuracy=accuracy,
cvfit=cvfit,
tissue.genes=tissue.genes,
genes=genes,
prediction.matrix=prediction.matrix,
train=as.matrix(train),
train.tissues=train.tissues,
test=as.matrix(test),
test.tissues=test.tissues)
out
}
keygenes.NGS <- function(train, test, train.tissues, genes=NULL,
test.tissues=NULL, verbose=FALSE) {
if (extends(class(train), "SummarizedExperiment")) {
train.tissues <- colData(train)[,train.tissues]
train <- assay(train)
}
if (extends(class(test), "SummarizedExperiment")) {
if (!is.null(test.tissues)) test.tissues <- colData(test)[,test.tissues]
test <- assay(test)
}
if (is.null(genes)) {
if (verbose) message("Determining most variable genes")
genes <- mostVariableGenes(train, n=500)
}
if (is.null(test.tissues)) {
if (verbose) message("Setting test tissues to NA")
test.tissues <- rep(NA, times=ncol(test))
}
keygenes.NGS.run(as.matrix(train), train.tissues, as.matrix(test), genes,
test.tissues, verbose)
}
T1 <- "human_fetal_wo_1t/training_fetal_wo_1t.txt"
T1Data <- read.table(T1, sep="\t", header=TRUE, row.names=1, check.names=FALSE)
T2 <- "human_fetal_wo_2t/training_fetal_wo_2t.txt"
T2Data <- read.table(T2, sep="\t", header=TRUE, row.names=1, check.names=FALSE)
samplesT1 <- colnames(T1Data)
tissuesT1 <- sapply(strsplit(samplesT1, "_"), "[", 1)
samplesT2 <- colnames(T2Data)
tissuesT2 <- sapply(strsplit(samplesT2, "_"), "[", 1)
col <- data.frame(row.names = c(colnames(T1Data), colnames(T2Data)))
col$tissue <- c(tissuesT1, tissuesT2)
col$trimester <- c(rep(1, times=length(tissuesT1)), rep(2, times=length(tissuesT2)))
trainData <- cbind(T1Data, T2Data)
train <- SummarizedExperiment::SummarizedExperiment(
assays=list(counts=as.matrix(trainData)),
colData=col)
training <- "human_fetal_wo_1t/training_fetal_wo_1t.txt"
foldid <- "human_fetal_wo_1t/foldid_fetal_wo_1t.txt"
top500 <- "human_fetal_wo_1t/top500_fetal_wo_1t.txt"
test <- "human_fetal_wo_2t/training_fetal_wo_2t.txt"
trainDF <- read.table(training, sep="\t", header=TRUE, row.names=1, check.names=FALSE)
test <- read.table(test, sep="\t", header=TRUE, row.names=1, check.names=FALSE)
top <- as.character(read.table(top500, sep="\t", header=TRUE, check.names=FALSE)[,1])
blah <- keygenes.NGS(train, sapply(strsplit(colnames(train), "_"), "[", 1),
test, top, sapply(strsplit(colnames(test), "_"), "[", 1), TRUE)
keygenes.NGS <- function(train, test, train.tissues, genes=NULL,
test.tissues=NULL, verbose=FALSE) {
if (extends(class(train), "SummarizedExperiment")) {
train.tissues <- colData(train)[,train.tissues]
train <- assay(train)
}
if (extends(class(test), "SummarizedExperiment")) {
if (!is.null(test.tissues)) test.tissues <- colData(test)[,test.tissues]
test <- assay(test)
}
if (is.null(genes)) {
if (verbose) message("Determining most variable genes")
genes <- mostVariableGenes(train, n=500)
}
if (is.null(test.tissues)) {
if (verbose) message("Setting test tissues to NA")
test.tissues <- rep(NA, times=ncol(test))
}
keygenes.NGS.run(as.matrix(train), train.tissues, as.matrix(test), genes,
test.tissues, verbose)
}
#' Title
#'
#' @param train
#' @param train.tissues
#' @param test
#' @param genes
#' @param test.tissues
#' @param verbose
#'
#' @return
#' @export
#'
#' @examples
keygenes.NGS.run <- function(train, train.tissues, test, genes,
test.tissues, verbose=FALSE) {
if (verbose) message("filtering and normalizing")
# common genes
common.genes <- intersect(row.names(train), row.names(test))
# merge test and training sets and normalize together
combined <- cbind(train[common.genes,], test[common.genes,])
normalized <- voom(as.matrix(combined), normalize.method = "none")$E
# filter for most variable genes
norm.filtered <- t(normalized[rownames(normalized) %in% genes,])
# split back up into train and test sets
train.i <- 1:ncol(train) # indices for train samples
test.i <- (1 + ncol(train)) : (ncol(train) + ncol(test)) # indices for test samples
norm.train <- norm.filtered[train.i,]
norm.test <- norm.filtered[test.i,]
# duplicate samples
norm.train.copy <- norm.train
train.tissues.copy <- train.tissues
while (any(table(train.tissues) < 3)) {
if (verbose) message("Not enough observations per tissue, duplicating data")
norm.train <- rbind(data.frame(norm.train),
data.frame(norm.train.copy))
train.tissues <- c(train.tissues, train.tissues.copy)
}
# get fold ids
if (verbose) message("Determining folds")
fold.id <- sample(rep(1:10, length(train.tissues)), length(train.tissues))
while (any(sapply(1:10,
function(i, f, m) {
any(table(m[f != i]) < 2)
},
fold.id, train.tissues))) {
if (verbose) message("retrying")
fold.id <- sample(rep(1:10, length(train.tissues)),
length(train.tissues))
}
# create the model
if (verbose) message("fitting model")
cvfit <- cv.glmnet(as.matrix(norm.train), train.tissues,
family="multinomial", foldid = fold.id)
# determine keyGenes(tm) for each tissue
if (verbose) message("Retrieving key genes")
coef <- coef(cvfit,  s=cvfit$lambda.min)
tissue.genes <- lapply(coef, function(x){
ind <- x@i[-1]+1
x@Dimnames[[1]][ind]
})
# make prediction for the test set
if (verbose) message("Making predicions")
pred <- drop(predict(cvfit, newx=norm.test, type="response",
s=cvfit$lambda.min))
prediction.matrix <- t(pred)
result <- data.frame(row.names=rownames(pred),
truth=test.tissues,
predicted=colnames(pred)[apply(pred,1,which.max)])
# Determine accuracy
if (verbose) message("calculating accuracy")
correct <- as.character(result$truth) == as.character(result$predicted)
nCorrect <- sum(correct, na.rm = T)
nTotal <- sum(!is.na(correct))
accuracy <- nCorrect / nTotal
# construct output
if (verbose) message("preparing output")
out <- new("KeyGenesResults",
result=result,
accuracy=accuracy,
cvfit=cvfit,
tissue.genes=tissue.genes,
genes=genes,
prediction.matrix=prediction.matrix,
train=as.matrix(train),
train.tissues=train.tissues,
test=as.matrix(test),
test.tissues=test.tissues)
out
}
mostVariableGenes <- function(counts, n=500) {
#TODO handle common datastructures besides data.frame: SE, RSE, MAE, etc.
norm <- voom(as.matrix(counts), normalize.method="none")$E
vars <- apply(norm, 1, var)
top <- sort.list(vars, decreasing=TRUE)[1:n]
rownames(counts[top,])
}
blah <- keygenes.NGS(train, sapply(strsplit(colnames(train), "_"), "[", 1),
test, top, sapply(strsplit(colnames(test), "_"), "[", 1), TRUE)
blah <- keygenes.NGS(trainDF, sapply(strsplit(colnames(train), "_"), "[", 1),
test, top, sapply(strsplit(colnames(test), "_"), "[", 1), TRUE)
debug(keygenes.NGS.run)
blah <- keygenes.NGS(trainDF, sapply(strsplit(colnames(train), "_"), "[", 1),
test, top, sapply(strsplit(colnames(test), "_"), "[", 1), TRUE)
combined
combined
View(train)
train
View(trainDF)
blah <- keygenes.NGS(trainDF, sapply(strsplit(colnames(train), "_"), "[", 1),
test, top, sapply(strsplit(colnames(test), "_"), "[", 1), TRUE)
train
test
blah <- keygenes.NGS(test, trainDF, sapply(strsplit(colnames(train), "_"), "[", 1), top, sapply(strsplit(colnames(test), "_"), "[", 1), TRUE)
blah <- keygenes.NGS(test, trainDF,
sapply(strsplit(colnames(train), "_"), "[", 1), top,
sapply(strsplit(colnames(test), "_"), "[", 1), TRUE)
combined
train.tissues
blah <- keygenes.NGS(test, trainDF,
sapply(strsplit(colnames(train), "_"), "[", 1), top,
sapply(strsplit(colnames(test), "_"), "[", 1), TRUE)
norm.train
dim(norm.train)
dim(train.tissues)
keygenes.NGS <- function(test, train, train.tissues, genes=NULL,
test.tissues=NULL, verbose=FALSE) {
if (extends(class(train), "SummarizedExperiment")) {
train.tissues <- colData(train)[,train.tissues]
train <- assay(train)
}
if (extends(class(test), "SummarizedExperiment")) {
if (!is.null(test.tissues)) test.tissues <- colData(test)[,test.tissues]
test <- assay(test)
}
if (is.null(genes)) {
if (verbose) message("Determining most variable genes")
genes <- mostVariableGenes(train, n=500)
}
if (is.null(test.tissues)) {
if (verbose) message("Setting test tissues to NA")
test.tissues <- rep(NA, times=ncol(test))
}
keygenes.NGS.run(as.matrix(test), as.matrix(train), train.tissues, genes,
test.tissues, verbose)
}
keygenes.NGS.run <- function(test, train, train.tissues, genes,
test.tissues, verbose=FALSE) {
if (verbose) message("filtering and normalizing")
# common genes
common.genes <- intersect(row.names(train), row.names(test))
# merge test and training sets and normalize together
combined <- cbind(train[common.genes,], test[common.genes,])
normalized <- voom(as.matrix(combined), normalize.method = "none")$E
# filter for most variable genes
norm.filtered <- t(normalized[rownames(normalized) %in% genes,])
# split back up into train and test sets
train.i <- 1:ncol(train) # indices for train samples
test.i <- (1 + ncol(train)) : (ncol(train) + ncol(test)) # indices for test samples
norm.train <- norm.filtered[train.i,]
norm.test <- norm.filtered[test.i,]
# duplicate samples
norm.train.copy <- norm.train
train.tissues.copy <- train.tissues
while (any(table(train.tissues) < 3)) {
if (verbose) message("Not enough observations per tissue, duplicating data")
norm.train <- rbind(data.frame(norm.train),
data.frame(norm.train.copy))
train.tissues <- c(train.tissues, train.tissues.copy)
}
# get fold ids
if (verbose) message("Determining folds")
fold.id <- sample(rep(1:10, length(train.tissues)), length(train.tissues))
while (any(sapply(1:10,
function(i, f, m) {
any(table(m[f != i]) < 2)
},
fold.id, train.tissues))) {
if (verbose) message("retrying")
fold.id <- sample(rep(1:10, length(train.tissues)),
length(train.tissues))
}
# create the model
if (verbose) message("fitting model")
cvfit <- cv.glmnet(as.matrix(norm.train), train.tissues,
family="multinomial", foldid = fold.id)
# determine keyGenes(tm) for each tissue
if (verbose) message("Retrieving key genes")
coef <- coef(cvfit,  s=cvfit$lambda.min)
tissue.genes <- lapply(coef, function(x){
ind <- x@i[-1]+1
x@Dimnames[[1]][ind]
})
# make prediction for the test set
if (verbose) message("Making predicions")
pred <- drop(predict(cvfit, newx=norm.test, type="response",
s=cvfit$lambda.min))
prediction.matrix <- t(pred)
result <- data.frame(row.names=rownames(pred),
truth=test.tissues,
predicted=colnames(pred)[apply(pred,1,which.max)])
# Determine accuracy
if (verbose) message("calculating accuracy")
correct <- as.character(result$truth) == as.character(result$predicted)
nCorrect <- sum(correct, na.rm = T)
nTotal <- sum(!is.na(correct))
accuracy <- nCorrect / nTotal
# construct output
if (verbose) message("preparing output")
out <- new("KeyGenesResults",
result=result,
accuracy=accuracy,
cvfit=cvfit,
tissue.genes=tissue.genes,
genes=genes,
prediction.matrix=prediction.matrix,
train=as.matrix(train),
train.tissues=train.tissues,
test=as.matrix(test),
test.tissues=test.tissues)
out
}
keygenes.NGS <- function(test, train, train.tissues, genes=NULL,
test.tissues=NULL, verbose=FALSE) {
if (extends(class(train), "SummarizedExperiment")) {
train.tissues <- colData(train)[,train.tissues]
train <- assay(train)
}
if (extends(class(test), "SummarizedExperiment")) {
if (!is.null(test.tissues)) test.tissues <- colData(test)[,test.tissues]
test <- assay(test)
}
if (is.null(genes)) {
if (verbose) message("Determining most variable genes")
genes <- mostVariableGenes(train, n=500)
}
if (is.null(test.tissues)) {
if (verbose) message("Setting test tissues to NA")
test.tissues <- rep(NA, times=ncol(test))
}
keygenes.NGS.run(as.matrix(test), as.matrix(train), train.tissues, genes,
test.tissues, verbose)
}
blah <- keygenes.NGS(test, trainDF,
sapply(strsplit(colnames(train), "_"), "[", 1), top,
sapply(strsplit(colnames(test), "_"), "[", 1), TRUE)
debug(keygenes.NGS.run)
blah <- keygenes.NGS(test, trainDF,
sapply(strsplit(colnames(train), "_"), "[", 1), top,
sapply(strsplit(colnames(test), "_"), "[", 1), TRUE)
test
train
dim(norm.train)
train.tissues
while (any(table(train.tissues) < 3)) {
if (verbose) message("Not enough observations per tissue, duplicating data")
norm.train <- rbind(data.frame(norm.train),
data.frame(norm.train.copy))
train.tissues <- c(train.tissues, train.tissues.copy)
}
norm.train
sim(norm.train)
dim(norm.train)
rownames(norm.train)
blah <- keygenes.NGS(test, trainDF,
sapply(strsplit(colnames(train), "_"), "[", 1), top,
sapply(strsplit(colnames(test), "_"), "[", 1), TRUE)
dim(norm.train)
length(train.tissues)
debug(keygenes.NGS)
blah <- keygenes.NGS(test, trainDF,
sapply(strsplit(colnames(train), "_"), "[", 1), top,
sapply(strsplit(colnames(test), "_"), "[", 1), TRUE)
traindim())
dim(train)
dim(train.tissues)
length(train.tissues)
blah <- keygenes.NGS(test, trainDF,
sapply(strsplit(colnames(trainDF), "_"), "[", 1), top,
sapply(strsplit(colnames(test), "_"), "[", 1), TRUE)
length(train)
blah <- scale(data@pred)
?scale
scaled <- scale(data@prediction.matrix)
data <- blah
scaled <- scale(data@prediction.matrix)
ord <- hclust( dist(scaled, method = "euclidean"), method = "ward.D" )$order
ord
pred.clusterd <- t(pred[ord,])
pred.clusterd <- t(prediction.matrix[ord,])
pred.clusterd <- t(data@prediction.matrix[ord,])
pred.clusterd
pred.clusterd <- t(data@prediction.matrix[,ord])
pred.clusterd
ord
ord <- hclust( dist(scaled, method = "euclidean"), method = "ward.D" )
ord
ord$labels
keygenes.heatmap <- function(data, clusterTissues=F, clusterSamples=F){
if (!extends(class(data), "KeyGenesResults")){
stop("data needs to be a KeyGenesResults object!")
}
pred.final <- data@prediction.matrix
if (clusterTissues || clusterSamples) scaled <- scale(data@prediction.matrix)
if (clusterTissues) {
ord <- hclust( dist(scaled, method = "euclidean"), method = "ward.D" )$order
pred.final <- pred.final[ord,]
}
if (clusterSamples) {
ord <- hclust( dist(t(scaled), method = "euclidean"), method = "ward.D" )$order # samples
pred.final <- pred.final[,ord]
}
meltedPrediction <- melt(pred.final, varnames = c("tissue", "sample"))
g <- ggplot(data=meltedPrediction)
g <- g + theme_minimal()
g <- g + geom_tile(aes(fill=value, x=sample, y=tissue), color="gray")
g <- g + scale_fill_gradient2(low="black", mid="white", high = "green2", midpoint = 0.5)
g <- g + labs(x="", y="")
g <- g + theme(axis.text.x = element_text(angle = 90, hjust = 1), axis.ticks = element_blank())
g
}
keygenes.heatmap(blah)
keygenes.heatmap(blah, T)
keygenes.heatmap(blah, T, T)
keygenes.heatmap(blah, F, T)
?ggplot
setwd("~/Desktop/git/keygenes/")
?save
T1 <- "sourceData/human_fetal_wo_1t/training_fetal_wo_1t.txt"
T1Data <- read.table(T1, sep="\t", header=TRUE, row.names=1, check.names=FALSE)
T2 <- "sourceData/human_fetal_wo_2t/training_fetal_wo_2t.txt"
T2Data <- read.table(T2, sep="\t", header=TRUE, row.names=1, check.names=FALSE)
samplesT1 <- colnames(T1Data)
tissuesT1 <- sapply(strsplit(samplesT1, "_"), "[", 1)
samplesT2 <- colnames(T2Data)
tissuesT2 <- sapply(strsplit(samplesT2, "_"), "[", 1)
fetalCol <- data.frame(row.names = c(colnames(T1Data), colnames(T2Data)))
fetalCol$tissue <- c(tissuesT1, tissuesT2)
fetalCol$trimester <- c(rep(1, times=length(tissuesT1)),
rep(2, times=length(tissuesT2)))
trainData <- cbind(T1Data, T2Data)
fetal_wo <- SummarizedExperiment::SummarizedExperiment(
assays=list(counts=as.matrix(trainData)),
colData=fetalCol)
save(fetal_wo, file="data/fetal.RData", compress = "xz", compression_level = 9)
adult <- "sourceData/human_adult/training_adult.txt"
adultData <- read.table(adult, sep="\t", header=TRUE, row.names=1,
check.names=FALSE)
adultTissues <- sapply(strsplit(adultData, "_"), "[", 1)
adult <- "sourceData/human_adult/training_adult.txt"
adultData <- read.table(adult, sep="\t", header=TRUE, row.names=1,
check.names=FALSE)
adultTissues <- sapply(strsplit(colnames(adultData), "_"), "[", 1)
adultCol <- data.frame(row.names = c(colnames(adultData)), tissue=adultTissues)
View(adultData)
colnames(adultData) <- make.names(colnames(adultData), unique = T)
adultTissues <- sapply(strsplit(colnames(adultData), "_"), "[", 1)
adultCol <- data.frame(row.names = c(colnames(adultData)), tissue=adultTissues)
fetwal_wo
fetal_wo
save(adult, file="data/adult.RData", compress = "xz", compression_level = 9)
save(fetal_wo, file="data/fetal_wo.RData", compress = "xz", compression_level = 9)
adult <- SummarizedExperiment::SummarizedExperiment(
assays=list(counts=as.matrix(adultData)),
colData=adultCol)
save(adult, file="data/adult.RData", compress = "xz", compression_level = 9)
library(testthat)
?context
test_that("SE input", {
data("fetal_wo")
data("adult")
test <- keygens.NGS(adult, fetal_wo, "tissue")
})
